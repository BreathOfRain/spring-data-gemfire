<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.springframework.org/schema/gemfire"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:beans="http://www.springframework.org/schema/beans"
            xmlns:tool="http://www.springframework.org/schema/tool"
            targetNamespace="http://www.springframework.org/schema/gemfire"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified"
            version="1.0">

    <xsd:import namespace="http://www.springframework.org/schema/beans"/>
    <xsd:import namespace="http://www.springframework.org/schema/tool"/>

    <xsd:annotation>
        <xsd:documentation><![CDATA[
            Namespace support for the Spring GemFire project.
        ]]></xsd:documentation>
    </xsd:annotation>
    
    <xsd:element name="cache">
		<xsd:annotation>
			<xsd:documentation source="org.springframework.data.gemfire.CacheFactoryBean"><![CDATA[
Defines a GemFire Cache instance used for creating or retrieving 'regions'.
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.gemstone.gemfire.cache.Cache" />
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="name" type="xsd:string" default="cache" use="optional">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
The name of the cache (by default "cache").]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

	<!-- nested bean definition -->
	<xsd:complexType name="beanDeclarationType">
		<xsd:sequence>
			<xsd:any namespace="##other" minOccurs="0" maxOccurs="1" processContents="skip">
    			<xsd:annotation>
         			<xsd:documentation><![CDATA[
Inner bean definition of the cache loader. The nested declaration serves as an alternative to bean references (using 
both in the same definition) is illegal.
					]]></xsd:documentation>
				</xsd:annotation>
         	</xsd:any>						
		</xsd:sequence>
		<xsd:attribute name="ref" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The name of the cache loader bean referred by this declaration. If no reference exists, use an inner bean declaration.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="regionType">
		<xsd:sequence>
			<xsd:element name="cache-loader" minOccurs="0" type="beanDeclarationType">
				<xsd:annotation>
					<xsd:documentation source="com.gemstone.gemfire.cache.CacheListener"><![CDATA[
A cache listener definition for this region. A cache listener handles region or entry related events (that occur after
various operations on the region).

Note: Avoid the risk of deadlock. Since the listener is invoked while holding a lock on the entry generating the event,
it is easy to generate a deadlock by interacting with the region. For this reason, it is highly recommended to use some
other thread for accessing the region and not waiting for it to complete its task.
					]]></xsd:documentation>
					<xsd:appinfo>
						<tool:annotation>
							<tool:exports type="com.gemstone.gemfire.cache.CacheWriter"/>
						</tool:annotation>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="cache-loader" minOccurs="0"  maxOccurs="1" type="beanDeclarationType">
				<xsd:annotation>
					<xsd:documentation source="com.gemstone.gemfire.cache.CacheLoader"><![CDATA[
The cache loader definition for this region. A cache loader allows data to be placed into a region.
					]]></xsd:documentation>
					<xsd:appinfo>
						<tool:annotation>
							<tool:exports type="com.gemstone.gemfire.cache.CacheWriter"/>
						</tool:annotation>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="cache-writer" minOccurs="0" maxOccurs="1" type="beanDeclarationType">
				<xsd:annotation>
					<xsd:documentation source="com.gemstone.gemfire.cache.CacheWriter"><![CDATA[
The cache writer definition for this region. A cache writer acts as a dedicated synchronous listener that is notified
before a region or an entry is modified. A typical example would be a writer that updates the database.

Note: Only one CacheWriter is invoked. GemFire will always prefer the local one (if it exists) otherwise it will
arbitrarily pick one.
					]]></xsd:documentation>
					<xsd:appinfo>
						<tool:annotation>
							<tool:exports type="com.gemstone.gemfire.cache.CacheLoader"/>
						</tool:annotation>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The name of the region.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:element name="replicated-region">
		<xsd:annotation>
			<xsd:documentation source="org.springframework.data.gemfire.RegionFactoryBean"><![CDATA[
Defines a GemFire replicated region instance. Each replicated region contains a complete copy of the data.
As well as high availability, replication provides excellent performance as each region contains a complete,
up to date copy of the data.
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.gemstone.gemfire.cache.Region" />
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="regionType">
					<xsd:attribute name="publisher" type="xsd:boolean" default="false" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
Indicates whether the defined replica region is a 'publisher' or not (the default). When other replicas are creates,
if there is a publisher replca, it will be always be the preferred (but not guaranteed) data source.

Note: this is a performance optimization for environments with large amounts of data for selecting a particular host.
For best performance, only designate one region as publisher.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="partitioned-region" type="regionType">
		<xsd:annotation>
			<xsd:documentation source="org.springframework.data.gemfire.RegionFactoryBean"><![CDATA[
Defines a GemFire partitioned region instance. Through partitioning, the data is split across regions.
Partitioning is useful when the amount of data to store is too large for one member to hold and work
with as if it were a single entity. One can configure the partitioned region to store redundant copies
in different members, for high availability in case of an application failure.
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.gemstone.gemfire.cache.Region" />
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
</xsd:schema>