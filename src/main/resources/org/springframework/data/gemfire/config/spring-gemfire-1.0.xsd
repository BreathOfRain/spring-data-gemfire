<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.springframework.org/schema/gemfire"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:beans="http://www.springframework.org/schema/beans"
            xmlns:tool="http://www.springframework.org/schema/tool"
            targetNamespace="http://www.springframework.org/schema/gemfire"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified"
            version="1.0">

    <xsd:import namespace="http://www.springframework.org/schema/beans"/>
    <xsd:import namespace="http://www.springframework.org/schema/tool"/>

    <xsd:annotation>
        <xsd:documentation><![CDATA[
            Namespace support for the Spring GemFire project.
        ]]></xsd:documentation>
    </xsd:annotation>
    
    <xsd:element name="cache">
		<xsd:annotation>
			<xsd:documentation source="org.springframework.data.gemfire.CacheFactoryBean"><![CDATA[
Defines a GemFire Cache instance used for creating or retrieving 'regions'.
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.gemstone.gemfire.cache.Cache" />
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="id" type="xsd:ID" use="optional">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
The name of the cache definition (by default "cache").]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="cache-xml-location" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation source="org.springframework.core.io.Resource"><![CDATA[
The location of the GemFire cache xml file, as a Spring resource location: a URL, a "classpath:" pseudo URL,
or a relative file path.
							]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="properties-ref" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation source="java.util.Properties"><![CDATA[
The bean name of a Java Properties object that will be used for property substitution. For loading properties
consider using a dedicated utility such as the <util:*/> namespace and its 'properties' element.
							]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

	<!-- nested bean definition -->
	<xsd:complexType name="beanDeclarationType">
		<xsd:sequence>
			<xsd:any namespace="##other" minOccurs="0" maxOccurs="1" processContents="skip">
    			<xsd:annotation>
         			<xsd:documentation><![CDATA[
Inner bean definition of the cache loader. The nested declaration serves as an alternative to bean references (using 
both in the same definition) is illegal.
					]]></xsd:documentation>
				</xsd:annotation>
         	</xsd:any>						
		</xsd:sequence>
		<xsd:attribute name="ref" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The name of the cache loader bean referred by this declaration. If no reference exists, use an inner bean declaration.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="regionType">
		<xsd:sequence>
			<xsd:element name="cache-listener" minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation source="com.gemstone.gemfire.cache.CacheListener"><![CDATA[
A cache listener definition for this region. A cache listener handles region or entry related events (that occur after
various operations on the region). Multiple listener can be declared in a nested manner.

Note: Avoid the risk of deadlock. Since the listener is invoked while holding a lock on the entry generating the event,
it is easy to generate a deadlock by interacting with the region. For this reason, it is highly recommended to use some
other thread for accessing the region and not waiting for it to complete its task.
					]]></xsd:documentation>
					<xsd:appinfo>
						<tool:annotation>
							<tool:exports type="com.gemstone.gemfire.cache.CacheListener"/>
						</tool:annotation>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:sequence>
						<xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="skip">
			    			<xsd:annotation>
			         			<xsd:documentation><![CDATA[
Inner bean definition of the cache loader.
								]]></xsd:documentation>
							</xsd:annotation>
			         	</xsd:any>						
					</xsd:sequence>
					<xsd:attribute name="ref" type="xsd:string" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
The name of the cache loader bean referred by this declaration. Used as a convenience method. If no reference exists, 
use inner bean declarations.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="cache-loader" minOccurs="0"  maxOccurs="1" type="beanDeclarationType">
				<xsd:annotation>
					<xsd:documentation source="com.gemstone.gemfire.cache.CacheLoader"><![CDATA[
The cache loader definition for this region. A cache loader allows data to be placed into a region.
					]]></xsd:documentation>
					<xsd:appinfo>
						<tool:annotation>
							<tool:exports type="com.gemstone.gemfire.cache.CacheLoader"/>
						</tool:annotation>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="cache-writer" minOccurs="0" maxOccurs="1" type="beanDeclarationType">
				<xsd:annotation>
					<xsd:documentation source="com.gemstone.gemfire.cache.CacheWriter"><![CDATA[
The cache writer definition for this region. A cache writer acts as a dedicated synchronous listener that is notified
before a region or an entry is modified. A typical example would be a writer that updates the database.

Note: Only one CacheWriter is invoked. GemFire will always prefer the local one (if it exists) otherwise it will
arbitrarily pick one.
					]]></xsd:documentation>
					<xsd:appinfo>
						<tool:annotation>
							<tool:exports type="com.gemstone.gemfire.cache.CacheWriter"/>
						</tool:annotation>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The name of the region.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="cache-ref" type="xsd:string" default="cache" use="optional">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The name of the bean defining the GemFire cache (by default 'cache').
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute> 
	</xsd:complexType>
	
	<xsd:element name="replicated-region">
		<xsd:annotation>
			<xsd:documentation source="org.springframework.data.gemfire.RegionFactoryBean"><![CDATA[
Defines a GemFire replicated region instance. Each replicated region contains a complete copy of the data.
As well as high availability, replication provides excellent performance as each region contains a complete,
up to date copy of the data.
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.gemstone.gemfire.cache.Region" />
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="regionType">
					<xsd:attribute name="publisher" type="xsd:boolean" default="false" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
Indicates whether the defined replica region is a 'publisher' or not (the default). When other replicas are creates,
if there is a publisher replca, it will be always be the preferred (but not guaranteed) data source.

Note: this is a performance optimization for environments with large amounts of data for selecting a particular host.
For best performance, only designate one region as publisher.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="partitioned-region">
		<xsd:annotation>
			<xsd:documentation source="org.springframework.data.gemfire.RegionFactoryBean"><![CDATA[
Defines a GemFire partitioned region instance. Through partitioning, the data is split across regions.
Partitioning is useful when the amount of data to store is too large for one member to hold and work
with as if it were a single entity. One can configure the partitioned region to store redundant copies
in different members, for high availability in case of an application failure.
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.gemstone.gemfire.cache.Region" />
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="regionType">
					<xsd:sequence>
						<xsd:element name="resolver" minOccurs="0" maxOccurs="1" type="beanDeclarationType" use="optional">
							<xsd:annotation>
								<xsd:documentation source="com.gemstone.gemfire.cache.PartitionResolver"><![CDATA[
The partition resolver definition for this region, allowing for custom partitioning. GemFire uses the resolver to
colocate data based on custom criterias (such as colocating trades by month and year).
								]]></xsd:documentation>
								<xsd:appinfo>
									<tool:annotation>
										<tool:exports type="com.gemstone.gemfire.cache.PartitionResolver"/>
									</tool:annotation>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
					<xsd:attribute name="copies" default="0" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
The number of copies for each partition for high-availability. By default, no copies are created meaning there is no
redundancy. Each copy provides extra backup at the expense of extra storages.
						]]></xsd:documentation>
						</xsd:annotation>
						<xsd:simpleType>
							<xsd:restriction base="xsd:byte">
								<xsd:minInclusive value="0"/>
								<xsd:maxInclusive value="3"/>
							</xsd:restriction>
						</xsd:simpleType>
					</xsd:attribute>
					<xsd:attribute name="colocated-with" type="xsd:string" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
The name of the partitioned region with which this newly created partitioned region is colocated.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="local-max-memory" type="xsd:positiveInteger" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
The maximum amount of memory, in megabytes, to be used by the region in this process. If not set, a default of 90%
of available heap is used.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="total-max-memory" type="xsd:positiveInteger" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
The maximum amount of memory, in megabytes, to be used by the region in all process.

Note: This setting must be the same in all processes using the region.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="total-buckets" type="xsd:positiveInteger" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
The total number of hash buckets to be used by the region in all processes. 

A bucket is the smallest unit of data management in a partitioned region. Entries are stored in buckets and buckets may
 move from one VM to another. Buckets may also have copies, depending on redundancy to provide high availability in the
  face of VM failure.
The number of buckets should be prime and as a rough guide at the least four times the number of partition VMs. However
, there is significant overhead to managing a bucket, particularly for higher values of redundancy.
 
Note: This setting must be the same in all processes using the region.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="recovery-delay" type="xsd:long" default="-1" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
The delay in milliseconds that existing members will wait before satisfying redundancy after another member crashes.
-1 (the default) indicates that redundancy will not be recovered after a failure.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="startup-recovery-delay" type="xsd:long" default="-1" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
The delay in milliseconds that new members will wait before satisfying redundancy. -1 indicates that adding new members
 will not trigger redundancy recovery. The default is to recover redundancy immediately when a new member is added.
 							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>