<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="bootstrap">
  <title>Bootstrapping GemFire through the Spring container</title>

  <para>One of the first tasks when using GemFire and Spring is to configure
  the data grid through the IoC container. While this is <ulink
  url="http://community.gemstone.com/display/gemfire/Integrating+GemFire+with+the+Spring+IoC+Container">possible</ulink>
  out of the box, the configuration tends to be verbose and only address basic
  cases. To address this problem, the Spring GemFire project provides several
  classes that enable the configuration of distributed caches or regions to
  support a variety of scenarios with minimal effort.</para>

  <section id="bootstrap:namespace">
  	<title>Using the Spring GemFire Namespace</title>
  	
  	<para>To simplify configuration, SGF provides a dedicated namespace for most of its components. However, one can opt to configure the beans
  	directly through the usual &lt;bean&gt; definition. For more information about XML Schema-based configuration in Spring, see 
  	<ulink url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/xsd-config.html">this</ulink> appendix in the
  	Spring Framework reference documentation.</para>
  	
  	<para>To use the SGF namespace, one just needs to import it inside the configuration:</para>

 	<programlistingco>
 		<areaspec>
 			<area id="gfe#ns#prefix" coords="4 11"/>
 			<area id="gfe#ns#uri" coords="4 58"/>
 			<area id="gfe#ns#uri#loc" coords="7 119"/>
 			<area id="gfe#ns#example" coords="10 9"/>
 		</areaspec>
 		<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:gfe="http://www.springframework.org/schema/gemfire"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire.xsd">
	<bean id ... >
	
    <gfe:cache ...>
		
</beans>]]>
 		</programlisting>
 		
 		<calloutlist>
 			<callout arearefs="gfe#ns#prefix">
 				<para>Spring GemFire namespace prefix. Any name can do but through out the reference documentation, the <literal>gfe</literal> will be used.</para>
 			</callout>
 			<callout arearefs="gfe#ns#uri">
 				<para>The namespace URI.</para>
 			</callout>
 			<callout arearefs="gfe#ns#uri#loc">
 				<para>The namespace URI location. Note that even though the location points to an external address (which exists and is valid), Spring will resolve
 				the schema locally as it is included in the Spring GemFire library.</para>
 			</callout>
 			<callout arearefs="gfe#ns#example">
 				<para>Declaration example for the GemFire namespace. Notice the prefix usage.</para>
 			</callout>
 		</calloutlist>
 	</programlistingco>
 	
 	<para>Once declared, the namespace elements can be declared simply by appending the aforementioned prefix. Note that is possible to change the default namespace,
 	for example from <literal>&lt;beans&gt;</literal> to <literal>&lt;gfe&gt;</literal>. This is useful for configuration composed mainly of GemFire components as
 	it avoids declaring the prefix. To achieve this, simply swap the namespace prefix declaration above:</para>

 	<programlistingco>
 		<areaspec>
 			<area id="gfe#default-ns#prefix" coords="2 64"/>
 			<area id="gfe#default-ns#beans-prefix" coords="3 64"/>
 			<area id="gfe#default-ns#beans-example" coords="9 64"/>
 			<area id="gfe#default-ns#gfe-example" coords="11 64"/>
 		</areaspec>
 		<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/gemfire"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="
	    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire.xsd">
	    
    <beans:bean id ... >
	
    <cache ...>
	
</beans>]]>
 		</programlisting>
 		
 		<calloutlist>
 			<callout arearefs="gfe#default-ns#prefix">
 				<para>The default namespace declaration for this XML file points to the Spring GemFire namespace.</para>
 			</callout>
 			<callout arearefs="gfe#default-ns#beans-prefix">
 				<para>The beans namespace prefix declaration.</para>
 			</callout>
 			<callout arearefs="gfe#default-ns#beans-example">
 				<para>Bean declaration using the <literal>&lt;beans&gt;</literal> namespace. Notice the prefix.</para>
 			</callout>
 			<callout arearefs="gfe#default-ns#gfe-example">
 				<para>Bean declaration using the <literal>&lt;gfe&gt;</literal> namespace. Notice the lack of prefix (as the default namespace is used).</para>
 			</callout>
 		</calloutlist>
 	</programlistingco>
 	
 	<para>For the remainder of this doc, to improve readability, the XML examples will simply refer to the <literal>&lt;gfe&gt;</literal> namespace
 	without the namespace declaration, where possible.</para>
  </section>
  
  <section id="bootstrap:cache">
  	<title>Configuring the GemFire
    <interfacename>Cache</interfacename></title>

    <para>In order to use the GemFire Fabric, one needs to either create a new
    <interfacename>Cache</interfacename> or connect to an existing one. As in
    the current version of GemFire, there can be only one opened cache per VM
    (or classloader to be technically correct). In most cases the cache is
    created once and then all other consumers connect to it.</para>

    <para>In its simplest form, a cache can be defined in one line:</para>

	<programlisting language="xml"><![CDATA[<gfe:cache />]]></programlisting>
 	
 	<para>The declaration above declares a bean(<literal>CacheFactoryBean</literal>) 
 	for the GemFire Cache, named <literal>gemfire-cache</literal>. All the other SGF components use this
 	naming convention if no name is specified, allowing for very concise configurations. The definition above will try to connect to
    an existing cache and, in case one does not exist, create it. Since no
    additional properties were specified the created cache uses the default
    cache configuration.Especially in environments with opened caches, this basic
    configuration can go a long way.</para>
 	
    <para>For scenarios where the cache needs to be
    configured, the user can pass in a reference the GemFire configuration
    file:</para>

    <programlisting language="xml"><![CDATA[<gfe:cache id="cache-with-xml" cache-xml-location="classpath:cache.xml"/>]]></programlisting>
    
    <para>In this example, if the cache needs to be created, it will use the
    file named <literal>cache.xml</literal> located in the classpath root.
    Only if the cache is created will the configuration file be used.</para> 
    
    <note>
        <para>Note that the configuration makes use of Spring's <ulink
        url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/resources.html"><interfacename>Resource</interfacename></ulink>
        abstraction to locate the file. This allows various search patterns to
        be used, depending on the running environment or the prefix specified
        (if any) by the value.</para>
      </note>
    <para>  
    In addition to referencing an external configuration file one can
    specify GemFire settings directly through Java
    <classname>Properties</classname>. This can be quite handy when just a few
    settings need to be changed.</para>
    
    <para>To setup properties one can either use the <literal>properties</literal> element inside the <literal>util</literal> namespace
    to declare or load properties files (the latter is recommended for externalizing environment specific settings outside the application
    configuration):</para>

    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:gfe="http://www.springframework.org/schema/gemfire"
    xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
        
     <gfe:cache id="cache-with-xml" cache-xml-location="classpath:cache.xml" properties-ref="props"/>
	 
     <util:properties id="props" location="classpath:/deployment/env.properties"/>
</beans>]]></programlisting>
    
    <para>Or can use fallback to a <emphasis>raw</emphasis> <literal>&lt;beans&gt;</literal> declaration:</para>
    
    <programlisting language="xml">&lt;bean id="cache-with-props" class="org.springframework.data.gemfire.CacheFactoryBean"&gt;
    &lt;property name="properties"&gt;
        &lt;props&gt;
           &lt;prop key="bind-address"&gt;127.0.0.1&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>

	<para>In this last example, the SGF classes are declared and configured directly without relying on the namespace. As one can tell,
	this approach is a generic one, exposing more of the backing infrastructure.</para>
	
    <para>It is worth pointing out again, that the cache settings apply only
    if the cache needs to be created, there is no opened cache in existence
    otherwise the existing cache will be used and the configuration will
    simply be discarded.</para>
  </section>

  <section id="bootstrap:region">
    <title>Configuring a GemFire <interfacename>Region</interfacename></title>

    <para>Once the <interfacename>Cache</interfacename> is configured, one
    needs to configure one or more <interfacename>Region</interfacename>s to
    interact with the data fabric. In a similar manner to the
    <classname>CacheFactoryBean</classname>, the
    <classname>RegionFactoryBean</classname> allows existing
    <interfacename>Region</interfacename>s to retrieved or, in case they don't
    exist, created using various settings. One can specify the
    <interfacename>Region</interfacename> name, whether it will be destroyed
    on shutdown (thereby acting as a temporary cache), the associated
    <interfacename>CacheLoader</interfacename>s,
    <interfacename>CacheListener</interfacename>s and
    <interfacename>CacheWriter</interfacename>s and if needed, the
    <interfacename>RegionAttributes</interfacename> for full
    customization.</para>

    <para>Let us start with a simple region declaration, named
    <emphasis>basic</emphasis> using a nested cache declaration:</para>

    <programlisting language="xml">&lt;bean id="basic" class="org.springframework.data.gemfire.RegionFactoryBean"&gt;
  &lt;property name="cache"&gt;
      &lt;bean class="org.springframework.data.gemfire.CacheFactoryBean"/&gt;
  &lt;/property&gt;
  &lt;property name="name" value="basic"/&gt;
&lt;/bean&gt;</programlisting>

    <para>Since the region bean definition name is usually the same with that
    of the cache, the <literal>name</literal> property can be omitted (the
    bean name will be used automatically). Additionally by using the name the
    <literal><ulink
    url="http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#beans-p-namespace">p</ulink></literal>
    namespace, the configuration can be simplified even more:</para>

    <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:p="http://www.springframework.org/schema/p"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;
  
    &lt;!-- shared cache across regions --&gt;
    &lt;bean id="cache" class="org.springframework.data.gemfire.CacheFactoryBean"/&gt;

    &lt;!-- region named 'basic' --&gt;
    &lt;bean id="basic" class="org.springframework.data.gemfire.RegionFactoryBean" p:cache-ref="cache"/&gt;

    &lt;!-- region with a name different then the bean definition --&gt;
    &lt;bean id="root-region" class="org.springframework.data.gemfire.RegionFactoryBean" p:cache-ref="cache" p:name="default-region"/&gt;
&lt;/beans&gt;</programlisting>

    <para>It is worth pointing out, that for the vast majority of cases
    configuring the cache loader, listener and writer through the Spring
    container is preferred since the same instances can be reused across
    multiple regions and additionally, the instances themselves can benefit
    from the container's rich feature set:</para>

    <programlisting language="xml">&lt;bean id="cacheLogger" class="org.some.pkg.CacheLogger"/&gt;
&lt;bean id="customized-region" class="org.springframework.data.gemfire.RegionFactoryBean" p:cache-ref="cache"&gt;
  &lt;property name="cacheListeners"&gt;
    &lt;array&gt;
      &lt;ref name="cacheLogger"/&gt;
    &lt;bean class="org.some.other.pkg.SysoutLogger"/&gt;
    &lt;/array&gt;
  &lt;/property&gt;
  &lt;property name="cacheLoader"&gt;&lt;bean class="org.some.pkg.CacheLoad"/&gt;&lt;/property&gt;
  &lt;property name="cacheWriter"&gt;&lt;bean class="org.some.pkg.CacheWrite"/&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="local-region" class="org.springframework.data.gemfire.RegionFactoryBean" p:cache-ref="cache"&gt;
  &lt;property name="cacheListeners" ref="cacheLogger"/&gt;	
&lt;/bean&gt;</programlisting>

    <section id="bootstrap:region:client">
      <title>Configuring a <emphasis>client</emphasis>
      <interfacename>Region</interfacename></title>

      <para>For scenarios where a <emphasis>CacheServer</emphasis> is used and
      <emphasis>clients</emphasis> need to be configured, SGF offers a
      dedicated configuration class named:
      <classname>ClientRegionFactoryBean</classname>. This allows client
      <emphasis>interests</emphasis> to be registered in both key and regex
      form through <classname>Interest</classname> and
      <classname>RegexInterest</classname> classes in the
      <literal>org.springframework.data.gemfire</literal> package:</para>

      <programlisting language="xml">&lt;bean id="interested-client" class="org.springframework.data.gemfire.client.ClientRegionFactoryBean" p:cache-ref="cache" p:name="client-region"&gt;
  &lt;property name="interests"&gt;
    &lt;array&gt;
      &lt;!-- key-based interest --&gt;
      &lt;bean class="org.springframework.data.gemfire.client.Interest" p:key="Vlaicu" p:policy="NONE"/&gt;
      &lt;!-- regex-based interest --&gt;
      &lt;bean class="org.springframework.data.gemfire.client.RegexInterest" p:key=".*" p:policy="KEYS" p:durable="true"/&gt;
    &lt;/array&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>
    </section>
    
    <section id="bootstrap:region:attributes">
      <title>Advanced configuration through a <interfacename>Region</interfacename>'s <emphasis>attributes</emphasis></title>
      
      <para>Users that need fine control over a region, can configure it in Spring by using the <literal>attributes</literal> property. To ease declarative configuration in Spring,
      SGF provides two <interfacename>FactoryBean</interfacename>s for creating <interfacename>RegionAttributes</interfacename> and <interfacename>PartitionAttributes</interfacename>,
      namely <classname>RegionAttributesFactory</classname> and <classname>PartitionAttributesFactory</classname>. See below an example of configuring a partitioned region through Spring
      XML:</para>
 
    <programlisting language="xml"><![CDATA[<bean id="partitioned-region" class="org.springframework.data.gemfire.RegionFactoryBean" p:cache-ref="cache">
  <property name="attributes">
    <bean class="org.springframework.data.gemfire.RegionAttributesFactory" p:initial-capacity="1024">
      <property name="partitionAttributes">
        <bean class="org.springframework.data.gemfire.PartitionAttributesFactory" p:redundant-copies="2" p:local-max-memory="512"/>
      </property>
    </bean>
  </property>
</bean>]]>
      </programlisting>
      
      <para>By using the attribute factories above, one can reduce the size of the <literal>cache.xml</literal> or even eliminate it all together.</para>  
    </section>
  </section>
</chapter>